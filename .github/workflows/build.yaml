# Cross build the Rust application using musl target on aarch64, x86_64 and mipsel, then publish them in the release.
name: Build and Publish
on:
  # Run on each pull requests
  pull_request:
  push: 
  # Run on release is published
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, x86_64, mipsel]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install cross
        run: cargo install cross
      - name: Build using cross
        run: cross build --target ${{ matrix.target }}-unknown-linux-musl --release
      - name: Upload as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}-unknown-linux-musl/release/cron-run

  publish:
    runs-on: ubuntu-latest
    needs: build
    # Run only if a release is published
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts to target/
        uses: actions/download-artifact@v2
        with:
          path: target/
      - name: Rename each downloaded artifact based on it's folder name
        run: |
          cd target && for arch in *; do
            mv -v $arch/cron-run ../cron-run.$arch
          done
      - name: Attach the artifacts to the release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: cron-run.*
          asset_content_type: application/octet-stream