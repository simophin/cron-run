# Cross build the Rust application using musl target on aarch64, x86_64 and mipsel, then publish them in the release.
name: Build and Publish
on:
  # Run on each pull requests
  pull_request:
  push:
    # Run on each push to master
    branches: [master]
  # Run on release is published
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        platform:
          - release_for: linux.mipsel
            os: ubuntu-latest
            binary_name: cron-run
            rust_target: mipsel-unknown-linux-musl

          - release_for: linux.arm64v8
            os: ubuntu-latest
            binary_name: cron-run
            rust_target: aarch64-unknown-linux-musl

          - release_for: linux.aarch64
            os: ubuntu-latest
            binary_name: cron-run
            rust_target: aarch64-unknown-linux-musl

          - release_for: linux.amd64
            os: ubuntu-latest
            binary_name: cron-run
            rust_target: x86_64-unknown-linux-musl

          - release_for: linux.x86_64
            os: ubuntu-latest
            binary_name: cron-run
            rust_target: x86_64-unknown-linux-musl

          - release_for: macos
            os: macos-latest
            binary_name: cron-run
            rust_target: x86_64-apple-darwin

          - release_for: windows.exe
            os: windows-latest
            binary_name: cron-run.exe
            rust_target: x86_64-pc-windows-msvc

          - release_for: macos.arm64
            os: macos-latest
            binary_name: cron-run
            rust_target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v2

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.platform.rust_target }}
          args: "--locked --release"
          strip: true
      
      - name: Upload as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Run only if a release is published
        if: github.event_name == 'release'
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.platform.rust_target }}/release/${{ matrix.platform.binary_name }}
          asset_name: cron-run.${{ matrix.platform.release_for }}
          asset_content_type: application/octet-stream
